/**
 * Utilidad para manejar fallbacks de iconos Material Design
 * Ayuda a resolver problemas de compatibilidad entre navegadores
 */

/**
 * Verifica si los iconos MDI est√°n cargados correctamente
 * @returns {boolean} true si los iconos est√°n disponibles
 */
export function checkMDIAvailability() {
  // Crear un elemento temporal para probar si la fuente est√° cargada
  const testElement = document.createElement('i')
  testElement.className = 'mdi mdi-home'
  testElement.style.position = 'absolute'
  testElement.style.left = '-9999px'
  testElement.style.fontSize = '16px'
  
  document.body.appendChild(testElement)
  
  // Verificar si el elemento tiene el ancho esperado de un icono MDI
  const hasIcon = testElement.offsetWidth > 0
  
  document.body.removeChild(testElement)
  
  return hasIcon
}

/**
 * Obtiene un icono de fallback si MDI no est√° disponible
 * @param {string} iconName - Nombre del icono MDI (ej: 'mdi-home')
 * @returns {string} Icono de fallback o el original
 */
export function getIconFallback(iconName) {
  if (!iconName) return 'mdi-help-circle'
  
  // Si MDI est√° disponible, devolver el icono original
  if (checkMDIAvailability()) {
    return iconName
  }
  
  // Mapeo de iconos MDI a caracteres Unicode como fallback
  const fallbackMap = {
    'mdi-home': 'üè†',
    'mdi-menu': '‚ò∞',
    'mdi-settings': '‚öôÔ∏è',
    'mdi-user': 'üë§',
    'mdi-users': 'üë•',
    'mdi-file': 'üìÑ',
    'mdi-folder': 'üìÅ',
    'mdi-edit': '‚úèÔ∏è',
    'mdi-delete': 'üóëÔ∏è',
    'mdi-plus': '‚ûï',
    'mdi-minus': '‚ûñ',
    'mdi-check': '‚úì',
    'mdi-close': '‚úï',
    'mdi-arrow-left': '‚Üê',
    'mdi-arrow-right': '‚Üí',
    'mdi-arrow-up': '‚Üë',
    'mdi-arrow-down': '‚Üì',
    'mdi-search': 'üîç',
    'mdi-filter': 'üîΩ',
    'mdi-sort': '‚ÜïÔ∏è',
    'mdi-refresh': 'üîÑ',
    'mdi-download': '‚¨áÔ∏è',
    'mdi-upload': '‚¨ÜÔ∏è',
    'mdi-save': 'üíæ',
    'mdi-print': 'üñ®Ô∏è',
    'mdi-email': '‚úâÔ∏è',
    'mdi-phone': 'üìû',
    'mdi-calendar': 'üìÖ',
    'mdi-clock': 'üïê',
    'mdi-star': '‚≠ê',
    'mdi-heart': '‚ù§Ô∏è',
    'mdi-warning': '‚ö†Ô∏è',
    'mdi-error': '‚ùå',
    'mdi-info': '‚ÑπÔ∏è',
    'mdi-help': '‚ùì',
    'mdi-lock': 'üîí',
    'mdi-unlock': 'üîì',
    'mdi-eye': 'üëÅÔ∏è',
    'mdi-eye-off': 'üôà'
  }
  
  return fallbackMap[iconName] || '‚ùì'
}

/**
 * Aplica fallbacks de iconos a todos los elementos MDI en la p√°gina
 */
export function applyIconFallbacks() {
  if (checkMDIAvailability()) {
    return // Los iconos MDI funcionan correctamente
  }
  
  console.warn('Material Design Icons no est√°n disponibles, aplicando fallbacks...')
  
  // Buscar todos los elementos con clases MDI
  const mdiElements = document.querySelectorAll('[class*="mdi-"]')
  
  mdiElements.forEach(element => {
    const classes = Array.from(element.classList)
    const mdiClass = classes.find(cls => cls.startsWith('mdi-'))
    
    if (mdiClass) {
      const fallback = getIconFallback(mdiClass)
      
      // Si es un emoji/car√°cter Unicode, reemplazar el contenido
      if (fallback.length <= 2) {
        element.textContent = fallback
        element.style.fontFamily = 'inherit'
        element.style.fontSize = element.style.fontSize || '16px'
      }
    }
  })
}

/**
 * Inicializa el sistema de fallback de iconos
 */
export function initIconFallback() {
  // Aplicar fallbacks cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', applyIconFallbacks)
  } else {
    applyIconFallbacks()
  }
  
  // Tambi√©n aplicar fallbacks cuando se agreguen nuevos elementos
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const mdiElements = node.querySelectorAll ? 
              node.querySelectorAll('[class*="mdi-"]') : []
            
            mdiElements.forEach(element => {
              const classes = Array.from(element.classList)
              const mdiClass = classes.find(cls => cls.startsWith('mdi-'))
              
              if (mdiClass && !checkMDIAvailability()) {
                const fallback = getIconFallback(mdiClass)
                if (fallback.length <= 2) {
                  element.textContent = fallback
                  element.style.fontFamily = 'inherit'
                }
              }
            })
          }
        })
      }
    })
  })
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  })
}