import api from './api'

/**
 * Servicio para gesti칩n de men칰s
 * Proporciona todas las operaciones CRUD para men칰s
 */
const menuService = {
  
  /**
   * Obtener todos los men칰s
   * @returns {Promise} Lista de men칰s
   */
  async getAllMenus() {
    try {
      const response = await api.get('/menu')
      return response.data
    } catch (error) {
      console.error('Error al obtener men칰s:', error)
      throw new Error('Error al cargar la lista de men칰s')
    }
  },

  /**
   * Obtener un men칰 por ID
   * @param {number} id - ID del men칰
   * @returns {Promise} Datos del men칰
   */
  async getMenuById(id) {
    try {
      const response = await api.get(`/menu/${id}`)
      return response.data
    } catch (error) {
      console.error('Error al obtener men칰:', error)
      throw new Error('Error al cargar el men칰')
    }
  },

  /**
   * Crear un nuevo men칰
   * @param {Object} menuData - Datos del men칰 a crear
   * @returns {Promise} Men칰 creado
   */
  async createMenu(menuData) {
    try {
      // Mapear datos del frontend al formato esperado por el backend
      const backendData = {
        name: menuData.name,
        path: menuData.path,
        icon: menuData.icon,
        order: menuData.order || 0,
        parentId: menuData.parentId,
        children: null,
        roles: menuData.roles?.map(role => role.replace('ROLE_', '')) || []
      }
      
      console.log('游댃 Datos mapeados para backend:', JSON.stringify(backendData, null, 2))
      
      const response = await api.post('/menu', backendData)
      return response.data
    } catch (error) {
      console.error('Error al crear men칰:', error)
      console.error('游댌 Detalles completos del error:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        headers: error.response?.headers
      })
      
      if (error.response?.status === 400) {
        throw new Error(`Datos del men칰 inv치lidos: ${error.response?.data?.message || 'Error de validaci칩n'}`)
      } else if (error.response?.status === 409) {
        throw new Error(`Ya existe un men칰 con esa ruta: ${error.response?.data?.message || 'Conflicto'}`)
      } else if (error.response?.status === 500) {
        throw new Error(`Error interno del servidor: ${error.response?.data?.message || 'Error del backend'}`)
      }
      
      // Preservar el error original para debugging
      const originalError = new Error(`Error al crear el men칰: ${error.message}`)
      originalError.originalError = error
      throw originalError
    }
  },

  /**
   * Actualizar un men칰 existente
   * @param {number} id - ID del men칰
   * @param {Object} menuData - Datos actualizados del men칰
   * @returns {Promise} Men칰 actualizado
   */
  async updateMenu(id, menuData) {
    try {
      // Mapear datos del frontend al formato esperado por el backend
      const backendData = {
        name: menuData.name,
        path: menuData.path,
        icon: menuData.icon,
        order: menuData.order || 0,
        parentId: menuData.parentId,
        children: null,
        roles: menuData.roles?.map(role => role.replace('ROLE_', '')) || []
      }
      
      console.log('游댃 Datos mapeados para actualizaci칩n:', JSON.stringify(backendData, null, 2))
      
      const response = await api.put(`/menu/${id}`, backendData)
      return response.data
    } catch (error) {
      console.error('Error al actualizar men칰:', error)
      console.error('游댌 Detalles completos del error:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        headers: error.response?.headers
      })
      
      if (error.response?.status === 404) {
        throw new Error(`Men칰 no encontrado: ${error.response?.data?.message || 'No existe'}`)
      } else if (error.response?.status === 400) {
        throw new Error(`Datos del men칰 inv치lidos: ${error.response?.data?.message || 'Error de validaci칩n'}`)
      } else if (error.response?.status === 409) {
        throw new Error(`Ya existe un men칰 con esa ruta: ${error.response?.data?.message || 'Conflicto'}`)
      } else if (error.response?.status === 500) {
        throw new Error(`Error interno del servidor: ${error.response?.data?.message || 'Error del backend'}`)
      }
      
      // Preservar el error original para debugging
      const originalError = new Error(`Error al actualizar el men칰: ${error.message}`)
      originalError.originalError = error
      throw originalError
    }
  },

  /**
   * Eliminar un men칰
   * @param {number} id - ID del men칰 a eliminar
   * @returns {Promise} Confirmaci칩n de eliminaci칩n
   */
  async deleteMenu(id) {
    try {
      const response = await api.delete(`/menu/${id}`)
      return response.data
    } catch (error) {
      console.error('Error al eliminar men칰:', error)
      if (error.response?.status === 404) {
        throw new Error('Men칰 no encontrado')
      } else if (error.response?.status === 409) {
        throw new Error('No se puede eliminar el men칰 porque tiene dependencias')
      }
      throw new Error('Error al eliminar el men칰')
    }
  },

  /**
   * Actualizar el orden de los men칰s
   * @param {Array} menuOrder - Array con IDs de men칰s en el nuevo orden
   * @returns {Promise} Confirmaci칩n de actualizaci칩n
   */
  async updateMenuOrder(menuOrder) {
    try {
      const response = await api.put('/menu/order', { order: menuOrder })
      return response.data
    } catch (error) {
      console.error('Error al actualizar orden de men칰s:', error)
      throw new Error('Error al actualizar el orden de los men칰s')
    }
  },

  /**
   * Obtener men칰s por rol de usuario
   * @param {string} role - Rol del usuario
   * @returns {Promise} Lista de men칰s filtrados por rol
   */
  async getMenusByRole(role) {
    try {
      const response = await api.get(`/menu/role/${role}`)
      return response.data
    } catch (error) {
      console.error('Error al obtener men칰s por rol:', error)
      throw new Error('Error al cargar men칰s del usuario')
    }
  },

  /**
   * Activar/Desactivar un men칰
   * @param {number} id - ID del men칰
   * @param {boolean} isActive - Estado activo/inactivo
   * @returns {Promise} Men칰 actualizado
   */
  async toggleMenuStatus(id, isActive) {
    try {
      const response = await api.patch(`/menu/${id}/status`, { isActive })
      return response.data
    } catch (error) {
      console.error('Error al cambiar estado del men칰:', error)
      if (error.response?.status === 404) {
        throw new Error('Men칰 no encontrado')
      }
      throw new Error('Error al cambiar el estado del men칰')
    }
  },

  /**
   * Obtener estructura jer치rquica de men칰s
   * @returns {Promise} Estructura de men칰s con jerarqu칤a
   */
  async getMenuHierarchy() {
    try {
      const response = await api.get('/menu/hierarchy')
      return response.data
    } catch (error) {
      console.error('Error al obtener jerarqu칤a de men칰s:', error)
      throw new Error('Error al cargar la estructura de men칰s')
    }
  },

  /**
   * Validar ruta de men칰
   * @param {string} path - Ruta a validar
   * @param {number} excludeId - ID del men칰 a excluir de la validaci칩n (para edici칩n)
   * @returns {Promise} Resultado de validaci칩n
   */
  async validateMenuPath(path, excludeId = null) {
    try {
      const params = { path }
      if (excludeId) {
        params.excludeId = excludeId
      }
      const response = await api.get('/menu/validate-path', { params })
      return response.data
    } catch (error) {
      console.error('Error al validar ruta:', error)
      throw new Error('Error al validar la ruta del men칰')
    }
  }
}

export default menuService